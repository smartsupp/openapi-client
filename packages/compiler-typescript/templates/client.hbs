import * as types from './types'
{{#each apis as |api|}}
import { {{api.className}} } from './apis/{{api.name}}'
{{/each}}
{{#each clients as |client|}}
import { {{client.className}} } from './clients/{{client.name}}/src'
{{/each}}

export class {{clientClassName}}<O = any> {
	{{#each apis as |api|}}
	{{api.name}}: {{api.className}}<O>
	{{/each}}

	{{#each clients as |client|}}
	{{client.name}}: {{client.className}}<O>
	{{/each}}

	{{#if defaultApi}}
	raw: {{clientClassName}}Raw<O>
	{{/if}}

	constructor(public adapter: types.IAdapter) {
		{{#each apis as |api|}}
		this.{{api.name}} = new {{api.className}}(adapter)
		{{/each}}

		{{#each clients as |client|}}
		this.{{client.name}} = new {{client.className}}(adapter)
		{{/each}}

		{{#if defaultApi}}
		this.raw = new {{clientClassName}}Raw(adapter)
		{{/if}}
	}

	withOptions(o: O): {{clientClassName}} {
		return new {{clientClassName}}(this.adapter.withOptions(o))
	}

	{{#if defaultApi}}
	{{#each defaultApi.operations as |op|}}{{'\n'}}
	{{#ifCond op.description '||' op.deprecated}}
	/**
	 * {{#if op.deprecated}}@deprecated {{/if}}{{op.description}}
	 */
	{{/ifCond}}
	{{#camelCase}}{{op.name}}{{/camelCase}}({{#opParams op}}{{/opParams}}): Promise<{{#opResponse op}}{{/opResponse}}> {
		return this.adapter.request({{#opArgs op}}{{/opArgs}}).then(toData)
		{{#if op.response}}{{#unless op.response.required}}.catch((err) => {
			if (err.response?.status === 404) {
				return null
			} else {
				throw err
			}
		}){{/unless}}{{/if}}
	}
	{{/each}}
	{{/if}}
}

{{#if defaultApi}}
class {{clientClassName}}Raw<O> {
	constructor(public adapter: types.IAdapter) {}
	{{#each defaultApi.operations as |op|}}{{'\n'}}
	{{#ifCond op.description '||' op.deprecated}}
	/**
	 * {{#if op.deprecated}}@deprecated {{/if}}{{op.description}}
	 */
	{{/ifCond}}
	{{#camelCase}}{{op.name}}{{/camelCase}}({{#opParams op}}{{/opParams}}): Promise<types.AdapterResponse<{{#opResponseRaw op}}{{/opResponseRaw}}>> {
		return this.adapter.request({{#opArgs op}}{{/opArgs}})
	}
	{{/each}}
}
{{/if}}

export default {{clientClassName}}

{{#if defaultApi}}
// helpers

function toData(res) {
	return res.data
}
{{/if}}
