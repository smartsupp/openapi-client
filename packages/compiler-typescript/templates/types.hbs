{{#each clients as |client|}}
export * as {{client.name}} from './clients/{{client.name}}/src/types'
{{/each}}

{{#*inline "definitions"}}
{{#each definitions as |definition|}}
{{#ifCond definition.description '||' definition.deprecated}}
/**
 * {{#if definition.deprecated}}@deprecated {{/if}}{{definition.description}}
 */{{/ifCond}}
{{#ifEquals definition.type 'enum'}}
{{#if @root.nativeEnum}}
export enum {{definition.name}} {
	{{#each definition.enum as |enumObj|}}
	{{#enumName enumObj}}{{/enumName}} = {{#enumValue enumObj}}{{/enumValue}},
	{{/each}}
}
{{else}}
export const {{definition.name}} = {
	{{#each definition.enum as |enumObj|}}
	{{#enumName enumObj}}{{/enumName}}: {{#enumValue enumObj}}{{/enumValue}},
	{{/each}}
} as const
export type {{definition.name}} = typeof {{definition.name}}[keyof typeof {{definition.name}}]
{{/if}}
{{/ifEquals}}
{{#ifEquals definition.type 'type'}}
export type {{definition.name}} =
	{{#each definition.values as |value|}}
	| {{#propType value}}{{/propType}}
	{{/each}}
{{/ifEquals}}
{{#ifEquals definition.type 'interface'}}
export interface {{definition.name}}{{#if definition.extends}} extends {{definition.extends}}{{/if}} {
	{{#each definition.properties as |prop|}}
	{{#ifCond prop.description '||' prop.deprecated}}/** {{#if prop.deprecated}}@deprecated {{/if}}{{prop.description}} */{{/ifCond}}
	{{prop.name}}{{#unless prop.required}}?{{/unless}}: {{#propType prop.type}}{{/propType}}
	{{/each}}
	{{#if definition.additionalType}}[keyof: string]: {{#propType definition.additionalType}}{{/propType}}{{/if}}
}
{{/ifEquals}}

{{/each}}
{{/inline}}

{{#*inline "paths"}}
{{#each operations as |operation|}}
	export const {{#pascalCase}}{{operation.name}}{{/pascalCase}} = {
		method: Methods.{{operation.method}},
		path: '{{operation.path}}',
		{{#if operation.params}}
		params: {
		{{#each operation.params as |param|}}
			{{param.name}}: 'string',
		{{/each}}
		},
		{{/if}}
	}
{{/each}}
{{/inline}}

export interface AdapterResponse<T> {
	status: number
	statusText: string
	data: T
	headers: Record<string, string>
}

export interface IAdapter {
	request<T = any>(method: string, path: string, body?: any, query?: any, options?: any): Promise<AdapterResponse<T>>
	withOptions(options: any): IAdapter
}

{{> definitions definitions=definitions}}

{{#each namespaces as |namespace|}}
export namespace {{#pascalCase}}{{namespace.name}}{{/pascalCase}} {
	{{> definitions definitions=namespace.definitions}}
}
{{/each}}

{{#if @root.exportPaths}}
export const Methods = {
	{{#each methods as |method|}}
	{{method}}: '{{#upperCase}}{{method}}{{/upperCase}}',
	{{/each}}
}
{{/if}}

{{#each apis as |api|}}
export namespace {{#pascalCase}}{{api.name}}Api{{/pascalCase}} {
	{{#if @root.exportPaths}}
		export namespace Paths {
			{{> paths operations=api.operations}}
		}
	{{/if}}
	{{> definitions definitions=api.definitions}}
}
{{/each}}
