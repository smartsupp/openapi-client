/* tslint:disable */
/* eslint-disable */

{{#*inline "definitions"}}
{{#each definitions as |definition|}}
{{#ifEquals definition.type 'enum'}}
{{#if @root.nativeEnum}}
export enum {{definition.name}} {
	{{#each definition.values as |value|}}
	{{#enumName value}}{{/enumName}} = '{{value}}',
	{{/each}}
}
{{else}}
export const {{definition.name}}Enum = {
	{{#each definition.values as |value|}}
	'{{value}}': {{#enumValue value}}{{/enumValue}},
	{{/each}}
} as const
export type {{definition.name}} = typeof {{definition.name}}Enum[keyof typeof {{definition.name}}Enum]
{{/if}}
{{/ifEquals}}
{{#ifEquals definition.type 'type'}}
export type {{definition.name}} =
	{{#each definition.values as |value|}}
	| {{#propType value}}{{/propType}}
	{{/each}}
{{/ifEquals}}
{{#ifEquals definition.type 'interface'}}
export interface {{definition.name}}{{#if definition.extends}} extends {{definition.extends}}{{/if}} {
	{{#each definition.properties as |prop|}}
	{{#if prop.description}}/** {{prop.description}} */{{/if}}
	{{prop.name}}{{#unless prop.required}}?{{/unless}}: {{#propType prop.type}}{{/propType}}
	{{/each}}
	{{#if definition.additionalType}}[keyof: string]: {{#propType definition.additionalType}}{{/propType}}{{/if}}
}
{{/ifEquals}}

{{/each}}
{{/inline}}

export interface AdapterResponse<T> {
	status: number
	statusText: string
	data: T
	headers: Record<string, string>
}

export interface IAdapter {
	request<T = any>(method: string, path: string, body?: any, query?: any, options?: any): Promise<AdapterResponse<T>>
	withOptions(options: any): IAdapter
}

{{> definitions definitions=definitions}}

{{#each apis as |api|}}
export namespace {{#pascalCase}}{{api.name}}Api{{/pascalCase}} {
	{{> definitions definitions=api.definitions}}
}
{{/each}}
